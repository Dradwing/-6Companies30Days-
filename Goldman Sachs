1
class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        
        int ans=0;

        for(int l=0;l<points.size();l++)
        {
               
            map<pair<int,int>, int> m;
            for(int i=0;i<points.size();i++)
            {
                if(i==l)continue;
                 int y=(points[i][1]-points[l][1]);
                 int x=points[i][0]-points[l][0];

                 int gc=__gcd(x,y);
                 x=x/gc;
                 y=y/gc;
                 m[make_pair(y,x)]++;  
            }

            for(auto el:m){
                ans=max(ans,el.second+1);
            }
        }
        return ans==0?1:ans;
    }
};
2
class Solution {
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {

        double s2=sqrt(1.00*(p1[0]-p2[0])*(p1[0]-p2[0])+(1.00*(p1[1]-p2[1])*(p1[1]-p2[1])));
        double s3=sqrt(1.00*(p1[0]-p3[0])*(p1[0]-p3[0])+(1.00*(p1[1]-p3[1])*(p1[1]-p3[1])));

        if(s2==0||s3==0)return false;

        if(s2<s3){
            double s4=sqrt(1.00*(p1[0]-p4[0])*(p1[0]-p4[0])+(1.00*(p1[1]-p4[1])*(p1[1]-p4[1])));
            double s34=sqrt(1.00*(p3[0]-p4[0])*(p3[0]-p4[0])+(1.00*(p3[1]-p4[1])*(p3[1]-p4[1])));
            double s23=sqrt(1.00*(p2[0]-p3[0])*(p2[0]-p3[0])+(1.00*(p2[1]-p3[1])*(p2[1]-p3[1])));

            double d24=sqrt(1.00*(p2[0]-p4[0])*(p2[0]-p4[0])+(1.00*(p2[1]-p4[1])*(p2[1]-p4[1])));

            if(d24==s3&&(s2==s4&&s4==s34&&s34==s23))return true;
        }
        else if(s3<s2)
        {
            double s4=sqrt(1.00*(p1[0]-p4[0])*(p1[0]-p4[0])+(1.00*(p1[1]-p4[1])*(p1[1]-p4[1])));
            double s24=sqrt(1.00*(p2[0]-p4[0])*(p2[0]-p4[0])+(1.00*(p2[1]-p4[1])*(p2[1]-p4[1])));
            double s32=sqrt(1.00*(p3[0]-p2[0])*(p3[0]-p2[0])+(1.00*(p3[1]-p2[1])*(p3[1]-p2[1])));

            double d34=sqrt(1.00*(p3[0]-p4[0])*(p3[0]-p4[0])+(1.00*(p3[1]-p4[1])*(p3[1]-p4[1])));

            if(d34==s2&&(s3==s4&&s4==s24&&s24==s32))return true;
        }
        else
        {
            double d14=sqrt(1.00*(p1[0]-p4[0])*(p1[0]-p4[0])+(1.00*(p1[1]-p4[1])*(p1[1]-p4[1])));
            double s24=sqrt(1.00*(p2[0]-p4[0])*(p2[0]-p4[0])+(1.00*(p2[1]-p4[1])*(p2[1]-p4[1])));
            double s32=sqrt(1.00*(p3[0]-p2[0])*(p3[0]-p2[0])+(1.00*(p3[1]-p2[1])*(p3[1]-p2[1])));

            double d34=sqrt(1.00*(p3[0]-p4[0])*(p3[0]-p4[0])+(1.00*(p3[1]-p4[1])*(p3[1]-p4[1])));

            if(d14==s32&&(s3==d34&&d34==s24&&s24==s2))return true;
        }

        return false;



    }
};

3
class Solution {
public:
    int trailingZeroes(int n) {

        // count factors of 2 and 5 from 1 to n;
        // count of 2>>>> count of 5 -> ignore 2;
        // for 5-> n/5;
        // for 25-> n/25;
        // ... 
         int count = 0;
        while (n != 0) {
            int tmp = n / 5;
            count += tmp;
            n = tmp;
        }
        return count;
    }
};
4
class Solution {
public:
    int numberOfBoomerangs(vector<vector<int>>& points) {

        int ans=0;

    
        for(int l=0;l<points.size();l++)
        {
            
            unordered_map<double,int> m;
            
            for(int i=0;i<points.size();i++)
            {
                if(l==i)continue;
                double d=sqrt(1.00*(long long int)(points[i][0]-points[l][0])*(long long int)(points[i][0]-points[l][0])+1.00*(long long int)(points[i][1]-points[l][1])*(long long int)(points[i][1]-points[l][1]));
                m[d]++;
            }

            for(auto [d,cnt]:m)
            {
                if(cnt<2)continue;
                ans+=cnt*(cnt-1);
            }

        }
        return ans;
        
    }
};

5
class Solution {
public:
    bool isPossible(vector<int>& nums) {
        // either the curr element can be appeded otherwise it must form new sequence;

        unordered_map<int,int> m1,m2;

        for(int l=0;l<nums.size();l++)m1[nums[l]]++;

        for(int l=0;l<nums.size();l++){
            if(m1[nums[l]]==0)continue;

            if(m2[nums[l]]>0){
                m1[nums[l]]--;
                m2[nums[l]]--;
                m2[nums[l]+1]++;

            }
            else if(m1[nums[l]+1]>0&&m1[nums[l]+2]>0){
                m1[nums[l]]--;
                m1[nums[l]+1]--;
                m1[nums[l]+2]--;
                m2[nums[l]+3]++;
            }
            else return false;
        }
        return true;
    }
};

6
class Solution {
public:
    int minimumCardPickup(vector<int>& cards) {
        
        int ans=INT_MAX;
        unordered_map<int,int> m;
        for(int l=0;l<cards.size();l++)
        {
            if(m[cards[l]]!=0)ans=min(ans,(l+1-m[cards[l]]+1));
            m[cards[l]]=l+1;
        }
        return ans==INT_MAX?-1:ans;
        
    }
};

8
class Solution {
public:

   vector<int> ans;
   int score=0;
   vector<int> v;
   int K;

   void helper(int n,int sum,int cost,vector<int> temp)
   {
       if(cost>K)return;
       if(n>11)
       {
           if(score<sum){
               ans=temp;
               ans[0]+=(K-cost);
               score=sum;
           }
           return;
       }

       helper(n+1,sum,cost,temp);
       temp[n]=v[n];
       sum+=n;
       cost+=v[n];
       helper(n+1,sum,cost,temp);
       return;
   }
    vector<int> maximumBobPoints(int numArrows, vector<int>& aliceArrows) {
        
        K=numArrows;
        vector<int> t(12,0);

        for(int l=0;l<12;l++){
            v.push_back(aliceArrows[l]+1);
        }
        helper(1,0,0,t);
        return ans;
    }
};

9
class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        
        vector<pair<long long int,long long int>> v(profits.size());

        for(int i=0;i<profits.size();i++)v[i]=make_pair(capital[i],profits[i]);

        sort(v.begin(),v.end());
        priority_queue<long long int> p;
        int j=0;
        for(int i=0;i<k;i++)
        {
           while(j<v.size()&&v[j].first<=w)p.push(v[j++].second);

           if(p.empty()||p.top()<0)return w;

           w+=p.top();
           p.pop();
        }
        return w;


    }
};

10
class Solution {
public:
    int peopleAwareOfSecret(int n, int delay, int forget) {

// can be done easily with queue;

        vector<long long int> v(n);
        v[0]=1;
        long long int mod=1000000007;
        
        long long int sum=0;
        for(int l=1;l<n;l++)
        {

            int i=l-forget;
            int j=l-delay;
            
            if(i>=0)sum=(((sum-v[i])%mod)+mod)%mod;
            if(j>=0)sum=(sum+v[j])%mod;
            v[l]=sum;
           
        }

        long long int ans=0;

        for(int i=(n-forget);i<n;i++)
        ans=(ans+v[i])%mod;
        return ans;


        
    }
};

11
class Solution {
public:
    vector<string> invalidTransactions(vector<string>& transactions) {
        
        unordered_map<string,vector<pair<int,pair<string,string>>>> m;
         vector<string> ans;
        for(int l=0;l<transactions.size();l++)
        {
            string name="";
            string city="";
            
            string amount="";
            string time="";
            int i=0;
            
            while(i<transactions[l].size())
            {
                if(transactions[l][i]==',')break;
                name+=transactions[l][i++];
            }
            i++;
            while(i<transactions[l].size())
            {
                if(transactions[l][i]==',')break;
                time+=transactions[l][i++];
            }
            i++;
            while(i<transactions[l].size())
            {
                if(transactions[l][i]==',')break;
                amount+=transactions[l][i++];
            }
            i++;
            while(i<transactions[l].size())
            {
                if(transactions[l][i]==',')break;
                city+=transactions[l][i++];
            }
                m[name].push_back(make_pair(stoi(time),make_pair(amount,city)));
            
        }
        for(auto el:m)
        {
            sort(el.second.begin(),el.second.end());

            for(int i=0;i<el.second.size();i++)
            { 
                int r=0;
                  
                for(int l=0;l<el.second.size();l++)
                {
                    if(l==i)continue;

                    if(abs(el.second[i].first-el.second[l].first)<=60&&el.second[i].second.second!=el.second[l].second.second){
                        r=1;
                        break;
                    }
                }  
               
                if((stoi(el.second[i].second.first)>1000)||r==1)
                {
                    string s="";
                    s+=el.first;
                    s+=",";
                    s+=to_string(el.second[i].first);
                    s+=",";
                    s+=el.second[i].second.first;
                    s+=",";
                    s+=el.second[i].second.second;
                    ans.push_back(s);
                }
            }
        }
        return ans;
    }
};

12
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    // stack can be used to save space;
    
    
    vector<int> first;
    vector<int> second;
    void Inorder1(TreeNode* root)
    {
        if(root==NULL)return;
        Inorder1(root->left);
        first.push_back(root->val);
        Inorder1(root->right);
        
    }
    void Inorder2(TreeNode* root)
    {
        if(root==NULL)return;
        Inorder2(root->left);
        second.push_back(root->val);
        Inorder2(root->right);
        
    }
public:
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        
        Inorder1(root1);
        Inorder2(root2);
        int i=0,j=0;
        vector<int> ans;
        while(i<first.size()&&j<second.size())
        {
            if(first[i]<second[j])
                ans.push_back(first[i++]);
            else
                ans.push_back(second[j++]);
        }
        while(i<first.size())
        {
            ans.push_back(first[i++]);
        }
        while(j<second.size())
            ans.push_back(second[j++]);
        return ans;
    }
};

13
class Solution {
public:
    vector<int> getBiggestThree(vector<vector<int>>& grid) {
         int  row = grid.size(), col = grid[0].size();
                priority_queue<int> pq;
        
        for (auto &r: grid) {
            for(auto &c: r) pq.push(c);
        }
        
        for (int k = 1; k < min(row, col); ++k) {
            for (int i = 0; i + 2 * k < row; ++i) {
                for (int j = 0; j + 2 * k < col; ++j) {
                    int sum = 0;
                    
                    for (int m = 0; m < k; ++m) {
                        sum += grid[i + k - m][j + m]; 
                        sum += grid[i + m][j + k + m]; 
                        sum += grid[i + k + m][j + 2 * k - m]; 
                        sum += grid[i + 2 * k - m][j + k - m]; 
                    }
                    pq.push(sum);
                }
            }
        }
        
        vector<int> ret;
        while (pq.empty() == false) {
            if (ret.empty() == true || ret.back() != pq.top()) {
                ret.push_back(pq.top());
            }
            if (ret.size() == 3) return ret;
            pq.pop();
        }
        return ret;
    }
};

14
class Solution {
public:
    int countNicePairs(vector<int>& nums) {
        
        unordered_map<long long int,long long int> m;

        for(int l=0;l<nums.size();l++)
        {
            long long int prev=nums[l];
            string nu=to_string(nums[l]);
            reverse(nu.begin(),nu.end());
            long long int curr=stoi(nu);
            m[prev-curr]++;
        }

        long long int ans=0,mod=1000000007;

        for(auto el:m)
        {
            long long int cnt=el.second;
            ans=(ans+(cnt*(cnt-1)/2))%mod;
        }
        return ans;
    }
};
